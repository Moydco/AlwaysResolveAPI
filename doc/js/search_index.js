var search_data = {"index":{"searchIndex":["actiondispatch","answer","resolv","ipv4","ipv6","apiaccount","apimoydco","application","applicationcontroller","applicationhelper","check","resolv","ipv4","clusterhelper","deletecheckworker","dnsserverstatus","domain","domainhelper","geodnseshelper","geolocationipshelper","logger","moped","bson","objectid","neighborregion","object","rack","record","mongoid","recordshelper","region","resolv","ipv4","semistaticcontroller","semistatichelper","sidekiq","updatecheckworker","user","userhelper","v1","apiaccountscontroller","checkscontroller","dnsdatascontroller","dnsserverstatusescontroller","domainscontroller","neighborscontroller","recordscontroller","regionscontroller","userscontroller","alias_allowed?()","answers_count_valid?()","api_key()","authorize_resource()","can_i_create_this_zone?()","check_alias_recursor()","check_answer_number()","check_list()","check_params()","check_weight_0()","check_weight_0()","choose_status()","correct_alias_destination?()","cors_preflight_check()","cors_set_access_control_headers()","create()","create()","create()","create()","create()","create()","create()","create_default_records()","delete_from_check_server()","delete_from_check_servers()","delete_zone()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","dot()","downcase_data()","downcase_name()","downcase_zone()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","is_admin?()","is_record_a?()","is_record_aaaa?()","is_record_cname?()","is_record_mx?()","is_record_ns?()","is_record_ptr?()","is_record_soa?()","is_record_srv?()","is_record_txt?()","json_zone()","paginate_parmas()","perform()","perform()","record_last_level()","record_name()","resolve_alias()","send_to_rabbit()","set_neighbor()","set_region()","set_secret()","set_ttl()","should_validate_check_ip_address?()","should_validate_dns_ip_address?()","show()","show()","show()","show()","show()","show()","show()","show()","unique_name?()","unique_record?()","update()","update()","update()","update()","update()","update()","update_check_server()","update_check_servers()","update_dns()","update_from_check()","update_link()","update_serial()","update_zone()","validates_property()","zone_name()","capfile","gemfile","gemfile.lock","rakefile","puma.sh","config.ru","404.html","422.html","500.html","favicon.ico","robots","server.pid"],"longSearchIndex":["actiondispatch","answer","answer::resolv","answer::resolv::ipv4","answer::resolv::ipv6","apiaccount","apimoydco","apimoydco::application","applicationcontroller","applicationhelper","check","check::resolv","check::resolv::ipv4","clusterhelper","deletecheckworker","dnsserverstatus","domain","domainhelper","geodnseshelper","geolocationipshelper","logger","moped","moped::bson","moped::bson::objectid","neighborregion","object","rack","record","record::mongoid","recordshelper","region","region::resolv","region::resolv::ipv4","semistaticcontroller","semistatichelper","sidekiq","updatecheckworker","user","userhelper","v1","v1::apiaccountscontroller","v1::checkscontroller","v1::dnsdatascontroller","v1::dnsserverstatusescontroller","v1::domainscontroller","v1::neighborscontroller","v1::recordscontroller","v1::regionscontroller","v1::userscontroller","record#alias_allowed?()","record#answers_count_valid?()","apiaccount#api_key()","applicationcontroller#authorize_resource()","domain#can_i_create_this_zone?()","record#check_alias_recursor()","record#check_answer_number()","v1::dnsdatascontroller#check_list()","v1::checkscontroller#check_params()","answer#check_weight_0()","record#check_weight_0()","check#choose_status()","answer#correct_alias_destination?()","applicationcontroller#cors_preflight_check()","applicationcontroller#cors_set_access_control_headers()","v1::apiaccountscontroller#create()","v1::checkscontroller#create()","v1::dnsserverstatusescontroller#create()","v1::domainscontroller#create()","v1::neighborscontroller#create()","v1::recordscontroller#create()","v1::regionscontroller#create()","domain#create_default_records()","region#delete_from_check_server()","check#delete_from_check_servers()","domain#delete_zone()","v1::apiaccountscontroller#destroy()","v1::checkscontroller#destroy()","v1::domainscontroller#destroy()","v1::neighborscontroller#destroy()","v1::recordscontroller#destroy()","v1::regionscontroller#destroy()","v1::userscontroller#destroy()","domain#dot()","answer#downcase_data()","record#downcase_name()","domain#downcase_zone()","semistaticcontroller#index()","v1::apiaccountscontroller#index()","v1::checkscontroller#index()","v1::dnsdatascontroller#index()","v1::dnsserverstatusescontroller#index()","v1::domainscontroller#index()","v1::neighborscontroller#index()","v1::recordscontroller#index()","v1::regionscontroller#index()","v1::userscontroller#index()","user#is_admin?()","answer#is_record_a?()","answer#is_record_aaaa?()","answer#is_record_cname?()","answer#is_record_mx?()","answer#is_record_ns?()","answer#is_record_ptr?()","answer#is_record_soa?()","answer#is_record_srv?()","answer#is_record_txt?()","domain#json_zone()","v1::checkscontroller#paginate_parmas()","deletecheckworker#perform()","updatecheckworker#perform()","domain#record_last_level()","domain#record_name()","domain#resolve_alias()","domain#send_to_rabbit()","neighborregion#set_neighbor()","record#set_region()","apiaccount#set_secret()","domain#set_ttl()","region#should_validate_check_ip_address?()","region#should_validate_dns_ip_address?()","v1::apiaccountscontroller#show()","v1::checkscontroller#show()","v1::dnsdatascontroller#show()","v1::domainscontroller#show()","v1::neighborscontroller#show()","v1::recordscontroller#show()","v1::regionscontroller#show()","v1::userscontroller#show()","record#unique_name?()","answer#unique_record?()","v1::apiaccountscontroller#update()","v1::checkscontroller#update()","v1::domainscontroller#update()","v1::neighborscontroller#update()","v1::recordscontroller#update()","v1::regionscontroller#update()","region#update_check_server()","check#update_check_servers()","record#update_dns()","v1::dnsdatascontroller#update_from_check()","v1::recordscontroller#update_link()","answer#update_serial()","domain#update_zone()","domain#validates_property()","domain#zone_name()","","","","","","","","","","","",""],"info":[["ActionDispatch","","ActionDispatch.html","",""],["Answer","","Answer.html","","<p>Attributes:\n<p>id: String, the local answer ID\n<p>data: String, only for CNAME, MX, NS, PTR, SRV, TXT\n"],["Answer::Resolv","","Answer/Resolv.html","",""],["Answer::Resolv::IPv4","","Answer/Resolv/IPv4.html","",""],["Answer::Resolv::IPv6","","Answer/Resolv/IPv6.html","",""],["ApiAccount","","ApiAccount.html","","<p>Attributes:\n<p>api_secret: String, the local API user Secret\n<p>rights, :type =&gt; Array, array of controllers …\n"],["ApiMoydCo","","ApiMoydCo.html","",""],["ApiMoydCo::Application","","ApiMoydCo/Application.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Check","","Check.html","","<p>Attributes:\n<p>id: String, the local Check Record ID\n<p>ip: String, thi IP Address to check\n"],["Check::Resolv","","Check/Resolv.html","",""],["Check::Resolv::IPv4","","Check/Resolv/IPv4.html","",""],["ClusterHelper","","ClusterHelper.html","",""],["DeleteCheckWorker","","DeleteCheckWorker.html","",""],["DnsServerStatus","","DnsServerStatus.html","","<p>Attributes:\n<p>server: String, the DNS serer ID inside region\n\n<p>Relations:\n"],["Domain","","Domain.html","","<p>Attributes:\n<p>id: String, the domain ID\n<p>zone: String, the zone name (ex. example.org). Must be unique\n"],["DomainHelper","","DomainHelper.html","",""],["GeoDnsesHelper","","GeoDnsesHelper.html","",""],["GeoLocationIpsHelper","","GeoLocationIpsHelper.html","",""],["Logger","","Logger.html","",""],["Moped","","Moped.html","",""],["Moped::BSON","","Moped/BSON.html","",""],["Moped::BSON::ObjectId","","Moped/BSON/ObjectId.html","",""],["NeighborRegion","","NeighborRegion.html","","<p>Attributes:\n<p>proximity: the distance from region-to-region\n\n<p>Relations\n"],["Object","","Object.html","",""],["Rack","","Rack.html","",""],["Record","","Record.html","","<p>Attributes:\n<p>id: String, the local record ID\n<p>name: String, the last level of domain\n"],["Record::Mongoid","","Record/Mongoid.html","",""],["RecordsHelper","","RecordsHelper.html","",""],["Region","","Region.html","","<p>Attributes:\n<p>country_code: String, two-letters country code (ex. IT, US)\n<p>code: String, provider reference …\n"],["Region::Resolv","","Region/Resolv.html","",""],["Region::Resolv::IPv4","","Region/Resolv/IPv4.html","",""],["SemiStaticController","","SemiStaticController.html","",""],["SemistaticHelper","","SemistaticHelper.html","",""],["Sidekiq","","Sidekiq.html","",""],["UpdateCheckWorker","","UpdateCheckWorker.html","",""],["User","","User.html","","<p>Attributes:\n<p>id: String, the local user ID\n<p>user_reference: String, the reference ID of user in SSO server, …\n"],["UserHelper","","UserHelper.html","",""],["V1","","V1.html","",""],["V1::ApiAccountsController","","V1/ApiAccountsController.html","",""],["V1::ChecksController","","V1/ChecksController.html","",""],["V1::DnsDatasController","","V1/DnsDatasController.html","",""],["V1::DnsServerStatusesController","","V1/DnsServerStatusesController.html","",""],["V1::DomainsController","","V1/DomainsController.html","",""],["V1::NeighborsController","","V1/NeighborsController.html","",""],["V1::RecordsController","","V1/RecordsController.html","",""],["V1::RegionsController","","V1/RegionsController.html","",""],["V1::UsersController","","V1/UsersController.html","",""],["alias_allowed?","Record","Record.html#method-i-alias_allowed-3F","(attributes)",""],["answers_count_valid?","Record","Record.html#method-i-answers_count_valid-3F","()",""],["api_key","ApiAccount","ApiAccount.html#method-i-api_key","()","<p>Return the key as string\n"],["authorize_resource","ApplicationController","ApplicationController.html#method-i-authorize_resource","()","<p>Method called in every API where is mandatory (via before filter) to\nconfirm user is the master of the …\n"],["can_i_create_this_zone?","Domain","Domain.html#method-i-can_i_create_this_zone-3F","()",""],["check_alias_recursor","Record","Record.html#method-i-check_alias_recursor","(record,type)",""],["check_answer_number","Record","Record.html#method-i-check_answer_number","()",""],["check_list","V1::DnsDatasController","V1/DnsDatasController.html#method-i-check_list","()",""],["check_params","V1::ChecksController","V1/ChecksController.html#method-i-check_params","()",""],["check_weight_0","Answer","Answer.html#method-i-check_weight_0","()",""],["check_weight_0","Record","Record.html#method-i-check_weight_0","()",""],["choose_status","Check","Check.html#method-i-choose_status","(status)",""],["correct_alias_destination?","Answer","Answer.html#method-i-correct_alias_destination-3F","()",""],["cors_preflight_check","ApplicationController","ApplicationController.html#method-i-cors_preflight_check","()","<p>If this is a preflight OPTIONS request, then short-circuit the request,\nreturn only the necessary headers …\n"],["cors_set_access_control_headers","ApplicationController","ApplicationController.html#method-i-cors_set_access_control_headers","()","<p>For all responses in this controller, return the CORS access control\nheaders.\n"],["create","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/api_accounts\n<p>Create an api accounts owned by User\n<p>Params:\n"],["create","V1::ChecksController","V1/ChecksController.html#method-i-create","()","<p>POST: /v1/users/:user_id/checks\n<p>Create a check that will be linked with cluster or record\n<p>Params:\n"],["create","V1::DnsServerStatusesController","V1/DnsServerStatusesController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/server_statuses\n<p>Update heartbeat of a server\n<p>Params:\n"],["create","V1::DomainsController","V1/DomainsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains\n<p>Show domain details\n<p>Params:\n"],["create","V1::NeighborsController","V1/NeighborsController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/neighbors\n<p>Params:\n<p>key: the admin key\n"],["create","V1::RecordsController","V1/RecordsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/records/\n<p>Create a new record in Domain\n<p>Params:\n"],["create","V1::RegionsController","V1/RegionsController.html#method-i-create","()","<p>POST: /v1/regions/\n<p>Create a region\n<p>Params:\n"],["create_default_records","Domain","Domain.html#method-i-create_default_records","()","<p>Create default SOA and NS records\n"],["delete_from_check_server","Region","Region.html#method-i-delete_from_check_server","(check_id)",""],["delete_from_check_servers","Check","Check.html#method-i-delete_from_check_servers","()",""],["delete_zone","Domain","Domain.html#method-i-delete_zone","()","<p>Delete zone in all DNS servers via RabbitMQ\n"],["destroy","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/api_accounts/:id\n<p>Delete an api accounts\n<p>Params:\n"],["destroy","V1::ChecksController","V1/ChecksController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/checks/:id\n<p>Delete a check\n<p>Params:\n"],["destroy","V1::DomainsController","V1/DomainsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["destroy","V1::NeighborsController","V1/NeighborsController.html#method-i-destroy","()","<p>DELETE: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["destroy","V1::RecordsController","V1/RecordsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Delete a record in Domain\n<p>Params:\n"],["destroy","V1::RegionsController","V1/RegionsController.html#method-i-destroy","()","<p>DELETE: /v1/regions/:id\n<p>Destroy a region\n<p>Params:\n"],["destroy","V1::UsersController","V1/UsersController.html#method-i-destroy","()","<p>DELETE: /v1/users/:id\n<p>Update User\n"],["dot","Domain","Domain.html#method-i-dot","(z)","<p>Add dot at the end of zone\n"],["downcase_data","Answer","Answer.html#method-i-downcase_data","()",""],["downcase_name","Record","Record.html#method-i-downcase_name","()",""],["downcase_zone","Domain","Domain.html#method-i-downcase_zone","()",""],["index","SemiStaticController","SemiStaticController.html#method-i-index","()","<p>GET: /\n<p>Root page of API: show only a welcome message with 200 code\n"],["index","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/api_accounts\n<p>Return all api accounts owned by User\n<p>Params:\n"],["index","V1::ChecksController","V1/ChecksController.html#method-i-index","()","<p>GET: /v1/users/:user_id/checks\n<p>Return the check for a domain\n<p>Params:\n"],["index","V1::DnsDatasController","V1/DnsDatasController.html#method-i-index","()",""],["index","V1::DnsServerStatusesController","V1/DnsServerStatusesController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/server_statuses\n<p>Return a the last seen heartbeat of a server\n<p>Params:\n"],["index","V1::DomainsController","V1/DomainsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains\n<p>Return all domains ownded by User\n<p>Params:\n"],["index","V1::NeighborsController","V1/NeighborsController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/neighbors\n<p>Params:\n<p>key: the admin key\n"],["index","V1::RecordsController","V1/RecordsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/\n<p>Return all records of Domain\n<p>Params:\n"],["index","V1::RegionsController","V1/RegionsController.html#method-i-index","()","<p>GET: /v1/regions/\n<p>Params:\n<p>key: the admin key\n"],["index","V1::UsersController","V1/UsersController.html#method-i-index","()","<p>GET: /v1/users/\n<p>Show User ID of current user\n"],["is_admin?","User","User.html#method-i-is_admin-3F","()",""],["is_record_a?","Answer","Answer.html#method-i-is_record_a-3F","()",""],["is_record_aaaa?","Answer","Answer.html#method-i-is_record_aaaa-3F","()",""],["is_record_cname?","Answer","Answer.html#method-i-is_record_cname-3F","()",""],["is_record_mx?","Answer","Answer.html#method-i-is_record_mx-3F","()",""],["is_record_ns?","Answer","Answer.html#method-i-is_record_ns-3F","()",""],["is_record_ptr?","Answer","Answer.html#method-i-is_record_ptr-3F","()",""],["is_record_soa?","Answer","Answer.html#method-i-is_record_soa-3F","()",""],["is_record_srv?","Answer","Answer.html#method-i-is_record_srv-3F","()",""],["is_record_txt?","Answer","Answer.html#method-i-is_record_txt-3F","()",""],["json_zone","Domain","Domain.html#method-i-json_zone","(region_id)","<p>Create the JSON of the zone:\n"],["paginate_parmas","V1::ChecksController","V1/ChecksController.html#method-i-paginate_parmas","()",""],["perform","DeleteCheckWorker","DeleteCheckWorker.html#method-i-perform","(check_id, region_id)",""],["perform","UpdateCheckWorker","UpdateCheckWorker.html#method-i-perform","(check_id, region_id)",""],["record_last_level","Domain","Domain.html#method-i-record_last_level","(fqdn)",""],["record_name","Domain","Domain.html#method-i-record_name","(record)","<p>check the record name and, if is empty, return the zone name\n"],["resolve_alias","Domain","Domain.html#method-i-resolve_alias","(record)",""],["send_to_rabbit","Domain","Domain.html#method-i-send_to_rabbit","(action)","<p>Send the zone to RabbitMQ servers four update\n"],["set_neighbor","NeighborRegion","NeighborRegion.html#method-i-set_neighbor","()",""],["set_region","Record","Record.html#method-i-set_region","()",""],["set_secret","ApiAccount","ApiAccount.html#method-i-set_secret","()","<p>create a random secret\n"],["set_ttl","Domain","Domain.html#method-i-set_ttl","(record)",""],["should_validate_check_ip_address?","Region","Region.html#method-i-should_validate_check_ip_address-3F","()",""],["should_validate_dns_ip_address?","Region","Region.html#method-i-should_validate_dns_ip_address-3F","()",""],["show","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/api_accounts/:id\n<p>Return the deatils of an api accounts owned by User\n<p>Params:\n"],["show","V1::ChecksController","V1/ChecksController.html#method-i-show","()","<p>GET: /v1/users/:user_id/checks/:id\n<p>Show the logs for a check\n<p>Params:\n"],["show","V1::DnsDatasController","V1/DnsDatasController.html#method-i-show","()",""],["show","V1::DomainsController","V1/DomainsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["show","V1::NeighborsController","V1/NeighborsController.html#method-i-show","()","<p>GET: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["show","V1::RecordsController","V1/RecordsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Show a record in Domain\n<p>Params:\n"],["show","V1::RegionsController","V1/RegionsController.html#method-i-show","()","<p>GET: /v1/regions/:id\n<p>Return a regions\n<p>Params:\n"],["show","V1::UsersController","V1/UsersController.html#method-i-show","()","<p>GET: /v1/users/:id\n<p>Update User\n"],["unique_name?","Record","Record.html#method-i-unique_name-3F","()",""],["unique_record?","Answer","Answer.html#method-i-unique_record-3F","()",""],["update","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/api_accounts/:id\n<p>Update an api accounts\n<p>Params:\n"],["update","V1::ChecksController","V1/ChecksController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/checks/:id\n<p>Create a check that will be linked with cluster or record\n<p>Params:\n"],["update","V1::DomainsController","V1/DomainsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["update","V1::NeighborsController","V1/NeighborsController.html#method-i-update","()","<p>PUT: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["update","V1::RecordsController","V1/RecordsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Update a record in Domain\n<p>Params:\n"],["update","V1::RegionsController","V1/RegionsController.html#method-i-update","()","<p>PUT: /v1/regions/:id\n<p>Update a region\n<p>Params:\n"],["update_check_server","Region","Region.html#method-i-update_check_server","(check_id)",""],["update_check_servers","Check","Check.html#method-i-update_check_servers","()",""],["update_dns","Record","Record.html#method-i-update_dns","()",""],["update_from_check","V1::DnsDatasController","V1/DnsDatasController.html#method-i-update_from_check","()",""],["update_link","V1::RecordsController","V1/RecordsController.html#method-i-update_link","()","<p>PUT:  /v1/users/:user_id/domains/:domain_id/records/:id/update_link\n<p>Update the record linked with the …\n"],["update_serial","Answer","Answer.html#method-i-update_serial","()","<p>If the serial date is in the past, set the serial to today date + 00\n<p>If the serial date is in today date, …\n"],["update_zone","Domain","Domain.html#method-i-update_zone","()","<p>Update data in all DNS servers via RabbitMQ\n"],["validates_property","Domain","Domain.html#method-i-validates_property","(zone)",""],["zone_name","Domain","Domain.html#method-i-zone_name","(fqdn)",""],["Capfile","","Capfile.html","","<p># Load DSL and Setup Up Stages require &#39;capistrano/setup&#39;\n<p># Includes default deployment tasks …\n"],["Gemfile","","Gemfile.html","","<p># ruby &#39;1.9.3&#39;, :engine =&gt; &#39;jruby&#39;, :engine_version\n=&gt; &#39;1.7.12&#39;\n<p>source &#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GIT\n\n<pre>remote: git://github.com/mongoid/mongoid.git\nrevision: 4893e77bb858b4f87d406115129cf8ca9d2c4f36\nspecs: ...</pre>\n"],["Rakefile","","Rakefile.html","","<p># Add your own tasks in files placed in lib/tasks ending in .rake, # for\nexample lib/tasks/capistrano.rake …\n"],["puma.sh","","bin/puma_sh.html","","<p>#!/usr/bin/env bash\n<p># Simple move this file into your Rails `script` folder. Also make sure you\n`chmod …\n"],["config.ru","","config_ru.html","","<p># This file is used by Rack-based servers to start the application.\n<p>require ::File.expand_path(&#39;../config/environment&#39;, …\n"],["404.html","","public/404_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;The page you were looking for doesn&#39;t exist (404)&lt;/title&gt; ...</pre>\n"],["422.html","","public/422_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;The change you wanted was rejected (422)&lt;/title&gt; ...</pre>\n"],["500.html","","public/500_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;We&#39;re sorry, but something went wrong (500)&lt;/title&gt; ...</pre>\n"],["favicon.ico","","public/favicon_ico.html","",""],["robots","","public/robots_txt.html","","<p>See www.robotstxt.org/wc/norobots.html for documentation on how to use the\nrobots.txt file\n<p>To ban all …\n"],["server.pid","","tmp/pids/server_pid.html","","<p>24409\n"]]}}