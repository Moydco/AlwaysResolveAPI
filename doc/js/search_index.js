var search_data = {"index":{"searchIndex":["answer","resolv","ipv4","ipv6","apiaccount","apimoydco","application","applicationcontroller","applicationhelper","check","resolv","ipv4","checkserverlog","clusterhelper","deletecheckworker","dnsserverlog","dnsserverstatus","domain","domainhelper","geodnseshelper","geolocationipshelper","logger","neighborregion","object","record","mongoid","recordshelper","region","resolv","ipv4","semistaticcontroller","semistatichelper","sidekiq","updatecheckworker","user","userhelper","v1","apiaccountscontroller","checkscontroller","dnsdatascontroller","dnsserverlogscontroller","dnsserverstatusescontroller","domainscontroller","neighborscontroller","recordscontroller","regionscontroller","userscontroller","alias_allowed?()","api_key()","authorize_resource()","check_list()","check_params()","correct_alias_destination?()","create()","create()","create()","create()","create()","create()","create()","create()","create_default_records()","delete_from_check_server()","delete_from_check_servers()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","dot()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","is_record_a?()","is_record_aaaa?()","is_record_cname?()","is_record_mx?()","is_record_ns?()","is_record_ptr?()","is_record_soa?()","is_record_srv?()","is_record_txt?()","json_zone()","paginate_parmas()","perform()","perform()","record_name()","send_to_rabbit()","set_neighbor()","set_region()","set_secret()","should_validate_check_ip_address?()","should_validate_dns_ip_address?()","show()","show()","show()","show()","show()","show()","show()","show()","unique_name?()","unique_record?()","update()","update()","update()","update()","update()","update()","update_check_server()","update_check_servers()","update_from_check()","update_link()","update_serial()","update_zone()","capfile","gemfile","gemfile.lock","rakefile","puma.sh","config.ru","check.rb.log","development.log","newrelic_agent.log","production.log","404.html","422.html","500.html","favicon.ico","robots"],"longSearchIndex":["answer","answer::resolv","answer::resolv::ipv4","answer::resolv::ipv6","apiaccount","apimoydco","apimoydco::application","applicationcontroller","applicationhelper","check","check::resolv","check::resolv::ipv4","checkserverlog","clusterhelper","deletecheckworker","dnsserverlog","dnsserverstatus","domain","domainhelper","geodnseshelper","geolocationipshelper","logger","neighborregion","object","record","record::mongoid","recordshelper","region","region::resolv","region::resolv::ipv4","semistaticcontroller","semistatichelper","sidekiq","updatecheckworker","user","userhelper","v1","v1::apiaccountscontroller","v1::checkscontroller","v1::dnsdatascontroller","v1::dnsserverlogscontroller","v1::dnsserverstatusescontroller","v1::domainscontroller","v1::neighborscontroller","v1::recordscontroller","v1::regionscontroller","v1::userscontroller","record#alias_allowed?()","apiaccount#api_key()","applicationcontroller#authorize_resource()","v1::dnsdatascontroller#check_list()","v1::checkscontroller#check_params()","answer#correct_alias_destination?()","v1::apiaccountscontroller#create()","v1::checkscontroller#create()","v1::dnsserverlogscontroller#create()","v1::dnsserverstatusescontroller#create()","v1::domainscontroller#create()","v1::neighborscontroller#create()","v1::recordscontroller#create()","v1::regionscontroller#create()","domain#create_default_records()","region#delete_from_check_server()","check#delete_from_check_servers()","v1::apiaccountscontroller#destroy()","v1::checkscontroller#destroy()","v1::domainscontroller#destroy()","v1::neighborscontroller#destroy()","v1::recordscontroller#destroy()","v1::regionscontroller#destroy()","v1::userscontroller#destroy()","domain#dot()","semistaticcontroller#index()","v1::apiaccountscontroller#index()","v1::checkscontroller#index()","v1::dnsdatascontroller#index()","v1::dnsserverlogscontroller#index()","v1::dnsserverstatusescontroller#index()","v1::domainscontroller#index()","v1::neighborscontroller#index()","v1::recordscontroller#index()","v1::regionscontroller#index()","v1::userscontroller#index()","answer#is_record_a?()","answer#is_record_aaaa?()","answer#is_record_cname?()","answer#is_record_mx?()","answer#is_record_ns?()","answer#is_record_ptr?()","answer#is_record_soa?()","answer#is_record_srv?()","answer#is_record_txt?()","domain#json_zone()","v1::checkscontroller#paginate_parmas()","deletecheckworker#perform()","updatecheckworker#perform()","domain#record_name()","domain#send_to_rabbit()","neighborregion#set_neighbor()","record#set_region()","apiaccount#set_secret()","region#should_validate_check_ip_address?()","region#should_validate_dns_ip_address?()","v1::apiaccountscontroller#show()","v1::checkscontroller#show()","v1::dnsdatascontroller#show()","v1::domainscontroller#show()","v1::neighborscontroller#show()","v1::recordscontroller#show()","v1::regionscontroller#show()","v1::userscontroller#show()","record#unique_name?()","answer#unique_record?()","v1::apiaccountscontroller#update()","v1::checkscontroller#update()","v1::domainscontroller#update()","v1::neighborscontroller#update()","v1::recordscontroller#update()","v1::regionscontroller#update()","region#update_check_server()","check#update_check_servers()","v1::dnsdatascontroller#update_from_check()","v1::recordscontroller#update_link()","answer#update_serial()","domain#update_zone()","","","","","","","","","","","","","","",""],"info":[["Answer","","Answer.html","",""],["Answer::Resolv","","Answer/Resolv.html","",""],["Answer::Resolv::IPv4","","Answer/Resolv/IPv4.html","",""],["Answer::Resolv::IPv6","","Answer/Resolv/IPv6.html","",""],["ApiAccount","","ApiAccount.html","","<p>Attributes:\n<p>api_secret: String, the local API user Secret\n<p>rights, :type =&gt; Array, array of controllers …\n"],["ApiMoydCo","","ApiMoydCo.html","",""],["ApiMoydCo::Application","","ApiMoydCo/Application.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Check","","Check.html","","<p>Attributes:\n<p>id: String, the local Check Record ID\n<p>ip: String, thi IP Address to check\n"],["Check::Resolv","","Check/Resolv.html","",""],["Check::Resolv::IPv4","","Check/Resolv/IPv4.html","",""],["CheckServerLog","","CheckServerLog.html","","<p>Attributes:\n<p>id: String, the local Check Record ID\n<p>signal: String, the signal coming from the check (OK, …\n"],["ClusterHelper","","ClusterHelper.html","",""],["DeleteCheckWorker","","DeleteCheckWorker.html","",""],["DnsServerLog","","DnsServerLog.html","","<p>Attributes:\n<p>server: server id in datacenter\n<p>signal: start or stop\n"],["DnsServerStatus","","DnsServerStatus.html","","<p>Attributes:\n<p>server: String, the DNS serer ID inside region\n\n<p>Relations:\n"],["Domain","","Domain.html","","<p>Attributes:\n<p>id: String, the domain ID\n<p>zone: String, the zone name (ex. example.org). Must be unique\n"],["DomainHelper","","DomainHelper.html","",""],["GeoDnsesHelper","","GeoDnsesHelper.html","",""],["GeoLocationIpsHelper","","GeoLocationIpsHelper.html","",""],["Logger","","Logger.html","",""],["NeighborRegion","","NeighborRegion.html","","<p>Attributes:\n<p>proximity: the distance from region-to-region\n\n<p>Relations\n"],["Object","","Object.html","",""],["Record","","Record.html","",""],["Record::Mongoid","","Record/Mongoid.html","",""],["RecordsHelper","","RecordsHelper.html","",""],["Region","","Region.html","","<p>Attributes:\n<p>code: String, two-letters country code (ex. IT, US)\n<p>dns_ip_address: String, the ip address …\n"],["Region::Resolv","","Region/Resolv.html","",""],["Region::Resolv::IPv4","","Region/Resolv/IPv4.html","",""],["SemiStaticController","","SemiStaticController.html","",""],["SemistaticHelper","","SemistaticHelper.html","",""],["Sidekiq","","Sidekiq.html","",""],["UpdateCheckWorker","","UpdateCheckWorker.html","",""],["User","","User.html","","<p>Attributes:\n<p>id: String, the local user ID\n<p>user_reference: String, the reference ID of user in SSO server, …\n"],["UserHelper","","UserHelper.html","",""],["V1","","V1.html","",""],["V1::ApiAccountsController","","V1/ApiAccountsController.html","",""],["V1::ChecksController","","V1/ChecksController.html","",""],["V1::DnsDatasController","","V1/DnsDatasController.html","",""],["V1::DnsServerLogsController","","V1/DnsServerLogsController.html","",""],["V1::DnsServerStatusesController","","V1/DnsServerStatusesController.html","",""],["V1::DomainsController","","V1/DomainsController.html","",""],["V1::NeighborsController","","V1/NeighborsController.html","",""],["V1::RecordsController","","V1/RecordsController.html","",""],["V1::RegionsController","","V1/RegionsController.html","",""],["V1::UsersController","","V1/UsersController.html","",""],["alias_allowed?","Record","Record.html#method-i-alias_allowed-3F","()",""],["api_key","ApiAccount","ApiAccount.html#method-i-api_key","()","<p>Return the key as string\n"],["authorize_resource","ApplicationController","ApplicationController.html#method-i-authorize_resource","()","<p>Method called in every API where is mandatory (via before filter) to\nconfirm user is the master of the …\n"],["check_list","V1::DnsDatasController","V1/DnsDatasController.html#method-i-check_list","()",""],["check_params","V1::ChecksController","V1/ChecksController.html#method-i-check_params","()",""],["correct_alias_destination?","Answer","Answer.html#method-i-correct_alias_destination-3F","()",""],["create","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/api_accounts\n<p>Create an api accounts owned by User\n<p>Params:\n"],["create","V1::ChecksController","V1/ChecksController.html#method-i-create","()","<p>POST: /v1/users/:user_id/checks\n<p>Create a check that will be linked with cluster or record\n<p>Params:\n"],["create","V1::DnsServerLogsController","V1/DnsServerLogsController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/server_logs\n<p>Add a new event for a DNS server\n<p>Params:\n"],["create","V1::DnsServerStatusesController","V1/DnsServerStatusesController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/server_statuses\n<p>Update heartbeat of a server\n<p>Params:\n"],["create","V1::DomainsController","V1/DomainsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains\n<p>Show domain details\n<p>Params:\n"],["create","V1::NeighborsController","V1/NeighborsController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/neighbors\n<p>Params:\n<p>key: the admin key\n"],["create","V1::RecordsController","V1/RecordsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/records/\n<p>Create a new record in Domain\n<p>Params:\n"],["create","V1::RegionsController","V1/RegionsController.html#method-i-create","()","<p>POST: /v1/regions/\n<p>Create a region\n<p>Params:\n"],["create_default_records","Domain","Domain.html#method-i-create_default_records","()","<p>Create default SOA and NS records\n"],["delete_from_check_server","Region","Region.html#method-i-delete_from_check_server","(check_id, host_id)",""],["delete_from_check_servers","Check","Check.html#method-i-delete_from_check_servers","()",""],["destroy","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/api_accounts/:id\n<p>Delete an api accounts\n<p>Params:\n"],["destroy","V1::ChecksController","V1/ChecksController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/checks/:id\n<p>Delete a check\n<p>Params:\n"],["destroy","V1::DomainsController","V1/DomainsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["destroy","V1::NeighborsController","V1/NeighborsController.html#method-i-destroy","()","<p>DELETE: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["destroy","V1::RecordsController","V1/RecordsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Delete a record in Domain\n<p>Params:\n"],["destroy","V1::RegionsController","V1/RegionsController.html#method-i-destroy","()","<p>DELETE: /v1/regions/:id\n<p>Destroy a region\n<p>Params:\n"],["destroy","V1::UsersController","V1/UsersController.html#method-i-destroy","()","<p>DELETE: /v1/users/:id\n<p>Update User\n"],["dot","Domain","Domain.html#method-i-dot","(z)","<p>Add dot at the end of zone\n"],["index","SemiStaticController","SemiStaticController.html#method-i-index","()","<p>GET: /\n<p>Root page of API: show only a welcome message with 200 code\n"],["index","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/api_accounts\n<p>Return all api accounts owned by User\n<p>Params:\n"],["index","V1::ChecksController","V1/ChecksController.html#method-i-index","()","<p>GET: /v1/users/:user_id/checks\n<p>Return the check for a domain\n<p>Params:\n"],["index","V1::DnsDatasController","V1/DnsDatasController.html#method-i-index","()",""],["index","V1::DnsServerLogsController","V1/DnsServerLogsController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/server_logs\n<p>Reatun al log events\n<p>Params:\n"],["index","V1::DnsServerStatusesController","V1/DnsServerStatusesController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/server_statuses\n<p>Return a the last seen heartbeat of a server\n<p>Params:\n"],["index","V1::DomainsController","V1/DomainsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains\n<p>Return all domains ownded by User\n<p>Params:\n"],["index","V1::NeighborsController","V1/NeighborsController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/neighbors\n<p>Params:\n<p>key: the admin key\n"],["index","V1::RecordsController","V1/RecordsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/\n<p>Return all records of Domain\n<p>Params:\n"],["index","V1::RegionsController","V1/RegionsController.html#method-i-index","()","<p>GET: /v1/regions/\n<p>Params:\n<p>key: the admin key\n"],["index","V1::UsersController","V1/UsersController.html#method-i-index","()","<p>GET: /v1/users/\n<p>Show User ID of current user\n"],["is_record_a?","Answer","Answer.html#method-i-is_record_a-3F","()",""],["is_record_aaaa?","Answer","Answer.html#method-i-is_record_aaaa-3F","()",""],["is_record_cname?","Answer","Answer.html#method-i-is_record_cname-3F","()",""],["is_record_mx?","Answer","Answer.html#method-i-is_record_mx-3F","()",""],["is_record_ns?","Answer","Answer.html#method-i-is_record_ns-3F","()",""],["is_record_ptr?","Answer","Answer.html#method-i-is_record_ptr-3F","()",""],["is_record_soa?","Answer","Answer.html#method-i-is_record_soa-3F","()",""],["is_record_srv?","Answer","Answer.html#method-i-is_record_srv-3F","()",""],["is_record_txt?","Answer","Answer.html#method-i-is_record_txt-3F","()",""],["json_zone","Domain","Domain.html#method-i-json_zone","(region_id)","<p>Create the JSON of the zone:\n"],["paginate_parmas","V1::ChecksController","V1/ChecksController.html#method-i-paginate_parmas","()",""],["perform","DeleteCheckWorker","DeleteCheckWorker.html#method-i-perform","(check_id, host_id, region_id)",""],["perform","UpdateCheckWorker","UpdateCheckWorker.html#method-i-perform","(check_id, host_id, region_id)",""],["record_name","Domain","Domain.html#method-i-record_name","(record)","<p>check the record name and, if is empty, return the zone name\n"],["send_to_rabbit","Domain","Domain.html#method-i-send_to_rabbit","()","<p>Send the zone to RabbitMQ servers four update\n"],["set_neighbor","NeighborRegion","NeighborRegion.html#method-i-set_neighbor","()",""],["set_region","Record","Record.html#method-i-set_region","()",""],["set_secret","ApiAccount","ApiAccount.html#method-i-set_secret","()","<p>create a random secret\n"],["should_validate_check_ip_address?","Region","Region.html#method-i-should_validate_check_ip_address-3F","()",""],["should_validate_dns_ip_address?","Region","Region.html#method-i-should_validate_dns_ip_address-3F","()",""],["show","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/api_accounts/:id\n<p>Return the deatils of an api accounts owned by User\n<p>Params:\n"],["show","V1::ChecksController","V1/ChecksController.html#method-i-show","()","<p>GET: /v1/users/:user_id/checks/:id\n<p>Show the logs for a check\n<p>Params:\n"],["show","V1::DnsDatasController","V1/DnsDatasController.html#method-i-show","()",""],["show","V1::DomainsController","V1/DomainsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["show","V1::NeighborsController","V1/NeighborsController.html#method-i-show","()","<p>GET: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["show","V1::RecordsController","V1/RecordsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Show a record in Domain\n<p>Params:\n"],["show","V1::RegionsController","V1/RegionsController.html#method-i-show","()","<p>GET: /v1/regions/:id\n<p>Return a regions\n<p>Params:\n"],["show","V1::UsersController","V1/UsersController.html#method-i-show","()","<p>GET: /v1/users/:id\n<p>Update User\n"],["unique_name?","Record","Record.html#method-i-unique_name-3F","()",""],["unique_record?","Answer","Answer.html#method-i-unique_record-3F","()",""],["update","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/api_accounts/:id\n<p>Update an api accounts\n<p>Params:\n"],["update","V1::ChecksController","V1/ChecksController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/checks/:id\n<p>Create a check that will be linked with cluster or record\n<p>Params:\n"],["update","V1::DomainsController","V1/DomainsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["update","V1::NeighborsController","V1/NeighborsController.html#method-i-update","()","<p>PUT: /v1/regions/:region_id/neighbors/:id\n<p>Params:\n<p>key: the admin key\n"],["update","V1::RecordsController","V1/RecordsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Update a record in Domain\n<p>Params:\n"],["update","V1::RegionsController","V1/RegionsController.html#method-i-update","()","<p>PUT: /v1/regions/:id\n<p>Update a region\n<p>Params:\n"],["update_check_server","Region","Region.html#method-i-update_check_server","(check_id, host_id)",""],["update_check_servers","Check","Check.html#method-i-update_check_servers","()",""],["update_from_check","V1::DnsDatasController","V1/DnsDatasController.html#method-i-update_from_check","()",""],["update_link","V1::RecordsController","V1/RecordsController.html#method-i-update_link","()","<p>PUT:  /v1/users/:user_id/domains/:domain_id/records/:id/update_link\n<p>Update the record linked with the …\n"],["update_serial","Answer","Answer.html#method-i-update_serial","()","<p>If the serial date is in the past, set the serial to today date + 00\n<p>If the serial date is in today date, …\n"],["update_zone","Domain","Domain.html#method-i-update_zone","()","<p>Update Serial SOA and DNS Servers\n"],["Capfile","","Capfile.html","","<p># Load DSL and Setup Up Stages require ‘capistrano/setup’\n<p># Includes default deployment tasks require …\n"],["Gemfile","","Gemfile.html","","<p>ruby ‘1.9.3’, :engine =&gt; ‘jruby’, :engine_version =&gt; ‘1.7.10’\n<p>source ‘rubygems.org’\n<p># Bundle edge …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GIT\n\n<pre>remote: git://github.com/mongoid/mongoid.git\nrevision: bde8ac1b0f16aaad7e343073ce8c5b5b9c9ffc5b\nspecs: ...</pre>\n"],["Rakefile","","Rakefile.html","","<p># Add your own tasks in files placed in lib/tasks ending in .rake, # for\nexample lib/tasks/capistrano.rake …\n"],["puma.sh","","bin/puma_sh.html","","<p>#!/usr/bin/env bash\n<p># Simple move this file into your Rails `script` folder. Also make sure you\n`chmod …\n"],["config.ru","","config_ru.html","","<p># This file is used by Rack-based servers to start the application.\n<p>require ::File.expand_path(‘../config/environment’, …\n"],["check.rb.log","","log/check_rb_log.html","","<p># Logfile created on 2013-12-01 12:10:14 +0100 by logger.rb/36483 I,\n[2013-12-01T12:10:14.068285 #2516] …\n"],["development.log","","log/development_log.html","","\n<pre class=\"ruby\"><span class=\"ruby-constant\">MOPED</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">127.0</span><span class=\"ruby-value\">.0</span><span class=\"ruby-value\">.1</span><span class=\"ruby-operator\">:</span><span class=\"ruby-value\">27017</span> <span class=\"ruby-constant\">COMMAND</span>      <span class=\"ruby-identifier\">database</span>=<span class=\"ruby-identifier\">admin</span> <span class=\"ruby-identifier\">command</span>={:<span class=\"ruby-identifier\">ismaster=</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-value\">1</span>} <span class=\"ruby-identifier\">runtime</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">0.7198</span><span class=\"ruby-identifier\">ms</span>\n</pre>\n<p>Started GET …\n"],["newrelic_agent.log","","log/newrelic_agent_log.html","","<p># Logfile created on 2013-10-14 14:35:46 +0200 by logger.rb/36483\n<p>10/14/13 14:35:46 +0200 az-workstation.azns.local … &mdash; "],["production.log","","log/production_log.html","","<p>I, [2013-12-01T09:38:52.430321 #2516]  INFO – : This daemon is still\nrunning at 2013-12-01 09:38:52 …\n"],["404.html","","public/404_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;The page you were looking for doesn't exist (404)&lt;/title&gt; ...</pre>\n"],["422.html","","public/422_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;The change you wanted was rejected (422)&lt;/title&gt; ...</pre>\n"],["500.html","","public/500_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;We're sorry, but something went wrong (500)&lt;/title&gt; ...</pre>\n"],["favicon.ico","","public/favicon_ico.html","",""],["robots","","public/robots_txt.html","","<p>See www.robotstxt.org/wc/norobots.html for documentation on how to use the\nrobots.txt file\n<p>To ban all …\n"]]}}