var search_data = {"index":{"searchIndex":["arecord","aaaarecord","apiaccount","apimoydco","application","applicationcontroller","applicationhelper","cluster","clusterhelper","cnamerecord","domain","domainhelper","geodnseshelper","geolocation","geolocationipshelper","mxrecord","nsrecord","object","ptrrecord","recordshelper","region","semistaticcontroller","semistatichelper","serverlog","serverstatus","soarecord","srvrecord","txtrecord","user","userhelper","v1","apiaccountscontroller","clusterscontroller","domainscontroller","geolocationipscontroller","geolocationscontroller","recordscontroller","regionscontroller","serverlogscontroller","serverstatusescontroller","userscontroller","api_key()","authorize_resource()","check_operational()","condition_testing?()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_default_records()","create_serial()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","disable_host()","dot()","enable_host()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","json_zone()","lockservice()","on_check?()","record_name()","resetlock()","send_to_rabbit()","set_secret()","show()","show()","show()","show()","show()","show()","show()","show()","unlockservice()","update()","update()","update()","update()","update()","update()","update()","update_serial()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","update_zone()","capfile","gemfile","readme","rakefile","robots"],"longSearchIndex":["arecord","aaaarecord","apiaccount","apimoydco","apimoydco::application","applicationcontroller","applicationhelper","cluster","clusterhelper","cnamerecord","domain","domainhelper","geodnseshelper","geolocation","geolocationipshelper","mxrecord","nsrecord","object","ptrrecord","recordshelper","region","semistaticcontroller","semistatichelper","serverlog","serverstatus","soarecord","srvrecord","txtrecord","user","userhelper","v1","v1::apiaccountscontroller","v1::clusterscontroller","v1::domainscontroller","v1::geolocationipscontroller","v1::geolocationscontroller","v1::recordscontroller","v1::regionscontroller","v1::serverlogscontroller","v1::serverstatusescontroller","v1::userscontroller","apiaccount#api_key()","applicationcontroller#authorize_resource()","arecord#check_operational()","arecord#condition_testing?()","v1::apiaccountscontroller#create()","v1::clusterscontroller#create()","v1::domainscontroller#create()","v1::geolocationipscontroller#create()","v1::geolocationscontroller#create()","v1::recordscontroller#create()","v1::regionscontroller#create()","v1::serverlogscontroller#create()","v1::serverstatusescontroller#create()","domain#create_default_records()","soarecord#create_serial()","v1::apiaccountscontroller#destroy()","v1::clusterscontroller#destroy()","v1::domainscontroller#destroy()","v1::geolocationipscontroller#destroy()","v1::geolocationscontroller#destroy()","v1::recordscontroller#destroy()","v1::regionscontroller#destroy()","arecord#disable_host()","domain#dot()","arecord#enable_host()","semistaticcontroller#index()","v1::apiaccountscontroller#index()","v1::clusterscontroller#index()","v1::domainscontroller#index()","v1::geolocationipscontroller#index()","v1::geolocationscontroller#index()","v1::recordscontroller#index()","v1::regionscontroller#index()","v1::serverlogscontroller#index()","v1::serverstatusescontroller#index()","v1::userscontroller#index()","domain#json_zone()","arecord#lockservice()","arecord#on_check?()","domain#record_name()","arecord#resetlock()","domain#send_to_rabbit()","apiaccount#set_secret()","v1::apiaccountscontroller#show()","v1::clusterscontroller#show()","v1::domainscontroller#show()","v1::geolocationipscontroller#show()","v1::geolocationscontroller#show()","v1::recordscontroller#show()","v1::regionscontroller#show()","v1::userscontroller#show()","arecord#unlockservice()","v1::apiaccountscontroller#update()","v1::clusterscontroller#update()","v1::domainscontroller#update()","v1::geolocationipscontroller#update()","v1::geolocationscontroller#update()","v1::recordscontroller#update()","v1::regionscontroller#update()","soarecord#update_serial()","arecord#update_zone()","aaaarecord#update_zone()","cnamerecord#update_zone()","domain#update_zone()","geolocation#update_zone()","mxrecord#update_zone()","nsrecord#update_zone()","ptrrecord#update_zone()","srvrecord#update_zone()","txtrecord#update_zone()","","","","",""],"info":[["ARecord","","ARecord.html","","<p>Attributes:\n<p>id: String, the local A Record ID\n<p>name: String, the local A name, must be unique\n"],["AaaaRecord","","AaaaRecord.html","","<p>Attributes:\n<p>id: String, the local AAAA Record ID\n<p>name: String, the local AAAA name, must be unique\n"],["ApiAccount","","ApiAccount.html","","<p>Attributes:\n<p>api_secret: String, the local API user Secret\n<p>rights, :type =&gt; Array, array of controllers …\n"],["ApiMoydCo","","ApiMoydCo.html","",""],["ApiMoydCo::Application","","ApiMoydCo/Application.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Cluster","","Cluster.html","","<p>Attributes:\n<p>id: String, the local Cluster Record ID\n<p>name: String, the local Cluster name, must be unique …\n"],["ClusterHelper","","ClusterHelper.html","",""],["CnameRecord","","CnameRecord.html","","<p>Attributes:\n<p>id: String, the local CNAME Record ID\n<p>name: String, the local CNAME name, must be unique\n"],["Domain","","Domain.html","","<p>Attributes:\n<p>id: String, the domain ID\n<p>zone: String, the zone name (ex. example.org). Must be unique\n"],["DomainHelper","","DomainHelper.html","",""],["GeoDnsesHelper","","GeoDnsesHelper.html","",""],["GeoLocation","","GeoLocation.html","","<p>Attributes:\n<p>id: String, the local GeoDns Record ID\n<p>region: String, the region associated to these IP Address …\n"],["GeoLocationIpsHelper","","GeoLocationIpsHelper.html","",""],["MxRecord","","MxRecord.html","","<p>Attributes:\n<p>id: String, the local MX Record ID\n<p>name: String, the local MX name\n"],["NsRecord","","NsRecord.html","","<p>Attributes:\n<p>id: String, the local NS Record ID\n<p>name: String, the local NS name\n"],["Object","","Object.html","",""],["PtrRecord","","PtrRecord.html","","<p>Attributes:\n<p>id: String, the local PTR Record ID\n<p>ip: String, the IP Address which resolves\n"],["RecordsHelper","","RecordsHelper.html","",""],["Region","","Region.html","","<p>Attributes:\n<p>code: String, two-letters country code (ex. IT, US)\n<p>ip_address: String, the ip address of local …\n"],["SemiStaticController","","SemiStaticController.html","",""],["SemistaticHelper","","SemistaticHelper.html","",""],["ServerLog","","ServerLog.html","","<p>Attributes:\n<p>server: server id in datacenter\n<p>signal: start or stop\n"],["ServerStatus","","ServerStatus.html","","<p>Attributes:\n<p>server: String, the DNS serer ID inside region\n\n<p>Relations:\n"],["SoaRecord","","SoaRecord.html","","<p>Attributes:\n<p>id: String, the local CNAME Record ID\n<p>mname: String, the primary DNS Server\n"],["SrvRecord","","SrvRecord.html","","<p>Attributes:\n<p>id: String, the local MX Record ID\n<p>name: String, the local MX name\n"],["TxtRecord","","TxtRecord.html","","<p>Attributes:\n<p>id: String, the local TXT Record ID\n<p>name: String, the local TXT name, must be unique\n"],["User","","User.html","","<p>Attributes:\n<p>id: String, the local user ID\n<p>user_reference: String, the reference ID of user in SSO server, …\n"],["UserHelper","","UserHelper.html","",""],["V1","","V1.html","",""],["V1::ApiAccountsController","","V1/ApiAccountsController.html","",""],["V1::ClustersController","","V1/ClustersController.html","",""],["V1::DomainsController","","V1/DomainsController.html","",""],["V1::GeoLocationIpsController","","V1/GeoLocationIpsController.html","",""],["V1::GeoLocationsController","","V1/GeoLocationsController.html","",""],["V1::RecordsController","","V1/RecordsController.html","",""],["V1::RegionsController","","V1/RegionsController.html","",""],["V1::ServerLogsController","","V1/ServerLogsController.html","",""],["V1::ServerStatusesController","","V1/ServerStatusesController.html","",""],["V1::UsersController","","V1/UsersController.html","",""],["api_key","ApiAccount","ApiAccount.html#method-i-api_key","()","<p>Return the key as string\n"],["authorize_resource","ApplicationController","ApplicationController.html#method-i-authorize_resource","()","<p>Method called in every API where is mandatory (via before filter) to\nconfirm user is the master of the …\n"],["check_operational","ARecord","ARecord.html#method-i-check_operational","(check,check_data)","<p>Check a service\n"],["condition_testing?","ARecord","ARecord.html#method-i-condition_testing-3F","()","<p>Test uniqueness only if parent is a domain\n"],["create","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/api_accounts\n<p>Create an api accounts owned by User\n<p>Params:\n"],["create","V1::ClustersController","V1/ClustersController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/clusters/\n<p>Create a new cluster in Domain; autocreate the default …\n"],["create","V1::DomainsController","V1/DomainsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains\n<p>Show domain details\n<p>Params:\n"],["create","V1::GeoLocationIpsController","V1/GeoLocationIpsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:geo_location_id/geo_location_ips/ …\n"],["create","V1::GeoLocationsController","V1/GeoLocationsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/\n<p>Create a new GeoLocation …\n"],["create","V1::RecordsController","V1/RecordsController.html#method-i-create","()","<p>POST: /v1/users/:user_id/domains/:domain_id/records/\n<p>Create a new record in Domain\n<p>Params:\n"],["create","V1::RegionsController","V1/RegionsController.html#method-i-create","()","<p>POST: /v1/regions/\n<p>Create a region\n<p>Params:\n"],["create","V1::ServerLogsController","V1/ServerLogsController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/server_logs\n<p>Add a new event for a DNS server\n<p>Params:\n"],["create","V1::ServerStatusesController","V1/ServerStatusesController.html#method-i-create","()","<p>POST: /v1/regions/:region_id/server_statuses\n<p>Update heartbeat of a server\n<p>Params:\n"],["create_default_records","Domain","Domain.html#method-i-create_default_records","()","<p>Create default SOA and NS records\n"],["create_serial","SoaRecord","SoaRecord.html#method-i-create_serial","()","<p>Set the serial to today date + 00\n"],["destroy","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/api_accounts/:id\n<p>Delete an api accounts\n<p>Params:\n"],["destroy","V1::ClustersController","V1/ClustersController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/clusters/:id\n<p>Delete a record in Domain\n<p>Params:\n"],["destroy","V1::DomainsController","V1/DomainsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["destroy","V1::GeoLocationIpsController","V1/GeoLocationIpsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:geo_location_id/geo_location_ips/ …\n"],["destroy","V1::GeoLocationsController","V1/GeoLocationsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:id\n<p>Delete a record in …\n"],["destroy","V1::RecordsController","V1/RecordsController.html#method-i-destroy","()","<p>DELETE: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Delete a record in Domain\n<p>Params:\n"],["destroy","V1::RegionsController","V1/RegionsController.html#method-i-destroy","()","<p>DELETE: /v1/regions/:id\n<p>Destroy a region\n<p>Params:\n"],["disable_host","ARecord","ARecord.html#method-i-disable_host","()","<p>Disable a service\n"],["dot","Domain","Domain.html#method-i-dot","(z)","<p>Add dot at the end of zone\n"],["enable_host","ARecord","ARecord.html#method-i-enable_host","()","<p>Enable a service\n"],["index","SemiStaticController","SemiStaticController.html#method-i-index","()","<p>GET: /\n<p>Root page of API: show only a welcome message with 200 code\n"],["index","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/api_accounts\n<p>Return all api accounts owned by User\n<p>Params:\n"],["index","V1::ClustersController","V1/ClustersController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/\n<p>Return all clusters of Domain\n<p>Params:\n"],["index","V1::DomainsController","V1/DomainsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains\n<p>Return all domains ownded by User\n<p>Params:\n"],["index","V1::GeoLocationIpsController","V1/GeoLocationIpsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:geo_location_id/geo_location_ips/ …\n"],["index","V1::GeoLocationsController","V1/GeoLocationsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/\n<p>Return all GeoLocation …\n"],["index","V1::RecordsController","V1/RecordsController.html#method-i-index","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/\n<p>Return all records of Domain\n<p>Params:\n"],["index","V1::RegionsController","V1/RegionsController.html#method-i-index","()","<p>GET: /v1/regions/\n<p>Params:\n<p>key: the admin key\n"],["index","V1::ServerLogsController","V1/ServerLogsController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/server_logs\n<p>Reatun al log events\n<p>Params:\n"],["index","V1::ServerStatusesController","V1/ServerStatusesController.html#method-i-index","()","<p>GET: /v1/regions/:region_id/server_statuses\n<p>Return a the last seen heartbeat of a server\n<p>Params:\n"],["index","V1::UsersController","V1/UsersController.html#method-i-index","()","<p>GET: /v1/users/\n<p>Show User ID of current user\n"],["json_zone","Domain","Domain.html#method-i-json_zone","(region)","<p>Create the JSON of the zone:\n"],["lockService","ARecord","ARecord.html#method-i-lockService","(id_server_check)","<p>Lock service check\n"],["on_check?","ARecord","ARecord.html#method-i-on_check-3F","(id_server_check)","<p>Chech if i&#39;m currently run the check\n"],["record_name","Domain","Domain.html#method-i-record_name","(record)","<p>check the record name and, if is empty, return the zone name\n"],["resetLock","ARecord","ARecord.html#method-i-resetLock","(id_server_check)","<p>Reset the locking of current record\n"],["send_to_rabbit","Domain","Domain.html#method-i-send_to_rabbit","()","<p>Send the zone to RabbitMQ servers four update\n"],["set_secret","ApiAccount","ApiAccount.html#method-i-set_secret","()","<p>create a random secret\n"],["show","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/api_accounts/:id\n<p>Return the deatils of an api accounts owned by User\n<p>Params:\n"],["show","V1::ClustersController","V1/ClustersController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/:id\n<p>Show a record in Domain\n<p>Params:\n"],["show","V1::DomainsController","V1/DomainsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["show","V1::GeoLocationIpsController","V1/GeoLocationIpsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:geo_location_id/geo_location_ips/ …\n"],["show","V1::GeoLocationsController","V1/GeoLocationsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:id\n<p>Show a record in Domain …\n"],["show","V1::RecordsController","V1/RecordsController.html#method-i-show","()","<p>GET: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Show a record in Domain\n<p>Params:\n"],["show","V1::RegionsController","V1/RegionsController.html#method-i-show","()","<p>GET: /v1/regions/:id\n<p>Return a regions\n<p>Params:\n"],["show","V1::UsersController","V1/UsersController.html#method-i-show","()","<p>GET: /v1/users/:id\n<p>Update User\n"],["unlockService","ARecord","ARecord.html#method-i-unlockService","(id_server_check)","<p>Unlock service check\n"],["update","V1::ApiAccountsController","V1/ApiAccountsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/api_accounts/:id\n<p>Update an api accounts\n<p>Params:\n"],["update","V1::ClustersController","V1/ClustersController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/clusters/:id\n<p>Update a record in Domain\n<p>Params:\n"],["update","V1::DomainsController","V1/DomainsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:id\n<p>Show domain details\n<p>Params:\n"],["update","V1::GeoLocationIpsController","V1/GeoLocationIpsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:geo_location_id/geo_location_ips/ …\n"],["update","V1::GeoLocationsController","V1/GeoLocationsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/clusters/:cluster_id/geo_locations/:id\n<p>Update a GeoLocation …\n"],["update","V1::RecordsController","V1/RecordsController.html#method-i-update","()","<p>PUT: /v1/users/:user_id/domains/:domain_id/records/:id\n<p>Update a record in Domain\n<p>Params:\n"],["update","V1::RegionsController","V1/RegionsController.html#method-i-update","()","<p>PUT: /v1/regions/:id\n<p>Update a region\n<p>Params:\n"],["update_serial","SoaRecord","SoaRecord.html#method-i-update_serial","()","<p>If the serial date is in the past, set the serial to today date + 00\n<p>If the serial date is in today date, …\n"],["update_zone","ARecord","ARecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","AaaaRecord","AaaaRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","CnameRecord","CnameRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","Domain","Domain.html#method-i-update_zone","()","<p>Update Serial SOA and DNS Servers\n"],["update_zone","GeoLocation","GeoLocation.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","MxRecord","MxRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","NsRecord","NsRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","PtrRecord","PtrRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","SrvRecord","SrvRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["update_zone","TxtRecord","TxtRecord.html#method-i-update_zone","()","<p>Call the update domain procedure when the record is saved or destroyed\n"],["Capfile","","Capfile.html","","<p># Load DSL and Setup Up Stages require &#39;capistrano/setup&#39;\n<p># Includes default deployment tasks …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails\n…\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"],["Rakefile","","Rakefile.html","","<p># Add your own tasks in files placed in lib/tasks ending in .rake, # for\nexample lib/tasks/capistrano.rake …\n"],["robots","","public/robots_txt.html","","<p>See www.robotstxt.org/wc/norobots.html for documentation on how to use the\nrobots.txt file\n<p>To ban all …\n"]]}}